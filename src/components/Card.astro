---

import { getSession } from 'auth-astro/server'
const session = await getSession(Astro.request);

---

<form class="card-form" id="form">
	<input type="text" class="input" value="" placeholder="Introduce tu URL" />
	<button type="submit" class="boton" >Obtener link</button>
	{
		!session &&
			<button class="google" type="button">Ingresar con google</button>
	}

	<div class="results"></div>
</form>
<style>
	.card-form {
		list-style: none;
		display: flex;
		padding: 30px;
		background-color: #23262d;
		background-image: none;
		background-size: 400%;
		border-radius: 7px;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
		display: flex;
		flex-direction: column;
		gap: 30px;
		justify-content: center;
		align-items: center;
	}
	.card-form > a {
		width: 100%;
		text-decoration: none;
		line-height: 1.4;
		padding: calc(1.5rem - 1px);
		border-radius: 8px;
		color: white;
		background-color: #23262d;
		opacity: 0.8;
	}
	h2 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	p {
		margin-top: 0.5rem;
		margin-bottom: 0;
	}

	.input {
		width: 100%;
		padding: 10px;
		border-radius: 10px;
		border: 1px solid #ccc;
		background-color: #23262d;
		color: white;
	}

	.boton {
		padding: 10px 20px;
		border-radius: 10px;
		border: none;
		background-color: #4CAF50;
		color: white;
		font-size: 16px;
		cursor: pointer;
	}

	.results {
		display: flex;
		flex-direction: column;
		gap: 10px;
	}

	.google {
		padding: 10px 20px;
		border-radius: 10px;
		border: none;
		background-color: #ab031a;
		color: white;
		font-size: 16px;
		cursor: pointer;
	}
</style>

<script>
	import { actions } from "astro:actions";
	const { signIn } = await import("auth-astro/client")
	const form = document.getElementById('form') as HTMLFormElement;
	const input = document.querySelector('.input') as HTMLInputElement;
	const boton = document.querySelector('.boton') as HTMLButtonElement;
	const results = document.querySelector('.results') as HTMLDivElement;
	const googleBtn = document.querySelector('.google') as HTMLDivElement;
	form?.addEventListener('submit', async (event) => {
		boton.disabled = true;
		event.preventDefault();
		const url = input.value;

		if(!url){
			alert('Debes ingresar una URL');
			boton.disabled = false;
			return;
		}

		// check is valid url
		const validUrl = new RegExp(
			/^(ftp|http|https):\/\/[^ "]+$/
		);

		if(!validUrl.test(url)){
			alert('Debes ingresar una URL vÃ¡lida');
			boton.disabled = false;
			return;
		}

		const slug = url.split('/')[2].split('.').length > 2 ? url.split('/')[2].split('.')[1] : url.split('/')[2].split('.')[0];
		const { data, error } = await actions.crearShortenerURL({
			url,
			slug
		})
		if(error) {
			alert('Error al acortar la URL');
			boton.disabled = false;
			return;
		}
		boton.disabled = false;

		const h2 = document.createElement('h2');
		const a = document.createElement('a');
		a.style.color = 'white';
		a.href = `${data.short_url}`;
		a.textContent = data.short_url;
		a.target = '_blank';
		h2.textContent = 'URL acortada';
		results.appendChild(h2);
		results.appendChild(a);
	});

	googleBtn?.addEventListener("click", async (e) => {
		e.preventDefault();

		googleBtn.setAttribute("disabled", "disabled");
		await signIn("google", {
			//callbackUrl: "/profile",
			//redirect: true,
			//redirectTo: "/profile",
		});
	});

</script>
